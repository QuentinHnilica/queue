<!-- ================= Modern, Responsive Public Nav ================= -->
<header id="q-site-nav"
  class="sticky top-0 z-[70] w-full border-b border-transparent bg-transparent
         transition-[background,border-color] duration-300 supports-[backdrop-filter]:backdrop-blur-xl">
  <div class="mx-auto max-w-[86rem] px-4 sm:px-6">
    <div class="flex h-16 items-center justify-between">
      <!-- Logo -->
<a href="/" class="flex items-center gap-3 shrink-0" aria-label="Queue Development">
  <picture>
    <source srcset="/assets/imgs/logo-nav.avif" type="image/avif">
    <source srcset="/assets/imgs/logo-nav.webp" type="image/webp">
    <img src="/assets/imgs/logo-nav.png" alt="Queue Development"
         width="156" height="36" class="h-9 w-auto" decoding="async" fetchpriority="high">
  </picture>
</a>



      <!-- Desktop links -->
      <nav id="q-links" class="hidden lg:flex items-center gap-1">
        <!-- Products (hover-to-open on desktop, click-to-toggle on mobile clone) -->
<!-- inside #q-links -->
<div class="relative has-dropdown">
  <button type="button" class="q-pill q-pill--hover flex items-center gap-1" id="q-products-btn"
          aria-haspopup="true" aria-expanded="false">
    Products
    <svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
      <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"/>
    </svg>
  </button>

  <div class="q-menu" role="menu" aria-label="Products">
    <ul class="py-2">
      <li><a href="/products/web-development" class="q-menu-item" role="menuitem">Website Development</a></li>
      <li><a href="/products/web-design"      class="q-menu-item" role="menuitem">Web Design</a></li>
      <li><a href="/products/web-applications" class="q-menu-item" role="menuitem">Web Applications</a></li>
    </ul>
  </div>
</div>


        <a href="/Book-A-Demo" class="q-pill q-pill--hover">Consultation</a>
        <a href="/about-us"    class="q-pill q-pill--hover">About</a>
        <a href="/portfolio"     class="q-pill q-pill--hover">Portfolio</a>
        <a href="/blog"        class="q-pill q-pill--hover">Blog</a>
        <a href="/contact"     class="q-pill q-pill--hover">Contact</a>
        
      </nav>

      <!-- Right side (desktop): actions -->
      <div class="hidden lg:flex items-center gap-3">
        <!-- Call -->
        <a href="tel:9892631273" class="q-action q-action--call">
          <!-- phone icon -->
          <svg viewBox="0 0 24 24" class="h-4 w-4" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round"
                  d="M2 5a2 2 0 012-2h2.5a1 1 0 011 .76l1 4a1 1 0 01-.27.95l-1.6 1.6a16 16 0 006.86 6.86l1.6-1.6a1 1 0 01.95-.27l4 1a1 1 0 01.76 1V20a2 2 0 01-2 2h-.5C9.28 22 2 14.72 2 5.5V5z"/>
          </svg>
          <span>(989) 263-1273</span>
        </a>
        <!-- Support -->
        <a href="mailto:support@queuedevelop.com" class="q-action q-action--support">
          <!-- mail icon -->
          <svg viewBox="0 0 24 24" class="h-4 w-4" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round"
                  d="M4 6h16a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V8a2 2 0 012-2zm0 0l8 6 8-6"/>
          </svg>
          <span>Support</span>
        </a>
        <!-- Primary CTA -->
        <a href="/Book-A-Demo" class="q-cta">Book a Demo</a>
      </div>

      <!-- Mobile toggle -->
      <button id="q-toggle"
        class="lg:hidden inline-flex items-center justify-center rounded-xl border border-white/10
               px-3 py-2 text-md font-semibold text-primaryQ
               hover:bg-white/10 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#df8327]/40"
        aria-expanded="false" aria-controls="q-drawer" type="button">
        <span class="sr-only text-primaryQ">Open menu</span> â˜°
      </button>
    </div>
  </div>

  <!-- Mobile drawer (cloned content) -->
  <div id="q-drawer"
       class="lg:hidden pointer-events-none fixed inset-x-0 top-16 z-[65] translate-y-2 opacity-0 transition-all duration-200">
    <div class="mx-4 rounded-2xl border border-white/10 bg-gray-900 p-3 shadow-2xl ">
      <nav id="q-drawer-slot" class="flex flex-col gap-2"></nav>
      <div id="q-drawer-actions" class="mt-2 grid grid-cols-2 gap-2">
        <a href="tel:9892631273" class="q-action q-action--call w-full justify-center">Call</a>
        <a href="mailto:support@queuedevelop.com" class="q-action q-action--support w-full justify-center">Support</a>
        <a href="/Book-A-Demo" class="q-cta w-full col-span-2 text-center">Book a Demo</a>
      </div>
    </div>
  </div>
</header>

<script>
(function () {
  const nav    = document.getElementById('q-site-nav');
  const toggle = document.getElementById('q-toggle');
  const drawer = document.getElementById('q-drawer');
  const slot   = document.getElementById('q-drawer-slot');
  const desktopLinks = document.getElementById('q-links');

  // expose your existing setOpen for reuse
  function setOpen(open) {
    if (!toggle || !drawer) return;
    toggle.setAttribute('aria-expanded', String(open));
    drawer.classList.toggle('pointer-events-none', !open);
    drawer.classList.toggle('opacity-0', !open);
    drawer.classList.toggle('translate-y-2', !open);
  }

  // NEW: close mobile drawer + desktop dropdowns
  function closeAllMenus() {
    setOpen(false);
    document.querySelectorAll('#q-links .has-dropdown.open').forEach(dd => {
      const btn  = dd.querySelector('button');
      const menu = dd.querySelector('.q-menu');
      if (btn && menu) {
        dd.classList.remove('open');
        btn.setAttribute('aria-expanded','false');
        menu.style.opacity = '';
        menu.style.transform = '';
        menu.style.pointerEvents = '';
        menu.style.display = '';
      }
    });
  }

  // --- Solid background + now also close menus on scroll ---
  const onScroll = () => {
    const y = window.scrollY || document.documentElement.scrollTop || 0;
    if (y > 8) nav.classList.add('is-solid'); else nav.classList.remove('is-solid');
    closeAllMenus(); // << add this line
  };
  window.addEventListener('scroll', onScroll, { passive: true }); onScroll();

  // --- Ensure nav & menus sit above homepage layers and aren't clipped ---
  try {
    nav.style.zIndex = '1000';
    nav.style.pointerEvents = 'auto';
    [nav, nav.parentElement, document.body].forEach(p => {
      if (!p) return;
      const cs = getComputedStyle(p);
      if (cs.overflow !== 'visible') p.style.overflow = 'visible';
      if (cs.transform !== 'none' || cs.backdropFilter !== 'none') {
        p.style.position = p.style.position || 'relative';
        p.style.zIndex = String(Math.max(1000, parseInt(cs.zIndex || '0', 10) || 0));
      }
    });
  } catch(_) {}

  // ===================== DESKTOP DROPDOWNS (hover + click, gap-proof) =====================
  function openMenu(dd, btn, menu) {
    dd.classList.add('open');
    btn.setAttribute('aria-expanded', 'true');
    menu.style.opacity = '1';
    menu.style.transform = 'translateY(0)';
    menu.style.pointerEvents = 'auto';
    menu.style.display = 'block';
  }
  function closeMenu(dd, btn, menu) {
    dd.classList.remove('open');
    btn.setAttribute('aria-expanded', 'false');
    menu.style.opacity = '';
    menu.style.transform = '';
    menu.style.pointerEvents = '';
    menu.style.display = '';
  }

  (function setupDesktopDropdowns() {
    const dds = Array.from(document.querySelectorAll('#q-links .has-dropdown'));
    if (!dds.length) return;

    const closeTimers = new WeakMap();

    const clearClose = (dd) => { const t = closeTimers.get(dd); if (t) { clearTimeout(t); closeTimers.delete(dd); } };
    const delayedClose = (dd, btn, menu) => {
      clearClose(dd);
      const t = setTimeout(() => closeMenu(dd, btn, menu), 150);
      closeTimers.set(dd, t);
    };
    const closeAll = (except) => {
      dds.forEach(dd => {
        if (dd === except) return;
        const b = dd.querySelector('button');
        const m = dd.querySelector('.q-menu');
        if (b && m) { clearClose(dd); closeMenu(dd, b, m); }
      });
    };

    dds.forEach(dd => {
      const btn = dd.querySelector('button');
      const menu = dd.querySelector('.q-menu');
      if (!btn || !menu) return;

      btn.setAttribute('aria-haspopup', 'true');
      btn.setAttribute('aria-expanded', 'false');

      dd.style.position = dd.style.position || 'relative';

      menu.style.marginTop = '0';
      menu.style.top = 'calc(100% + 0px)';
      menu.style.left = '0';
      menu.style.position = 'absolute';
      menu.style.zIndex = '1100';

      dd.addEventListener('mouseenter', () => { clearClose(dd); openMenu(dd, btn, menu); });
      dd.addEventListener('mouseleave', () => { delayedClose(dd, btn, menu); });

      btn.addEventListener('click', (e) => {
        e.preventDefault(); e.stopPropagation();
        const isOpen = dd.classList.contains('open');
        if (isOpen) { clearClose(dd); closeMenu(dd, btn, menu); }
        else { closeAll(dd); openMenu(dd, btn, menu); }
      });

      menu.addEventListener('click', (e) => e.stopPropagation());
      menu.addEventListener('focusin', () => { clearClose(dd); openMenu(dd, btn, menu); });
    });

    document.addEventListener('click', () => closeAll(null));
    document.addEventListener('keydown', (e) => { if (e.key === 'Escape') closeAll(null); });
  })();

  // ===================== MOBILE: clone & accordion =====================
  if (desktopLinks && slot && !slot.childElementCount) {
    const cloned = desktopLinks.cloneNode(true);
    cloned.id = '';

    Array.from(cloned.querySelectorAll('.has-dropdown')).forEach(d => {
      const btn = d.querySelector('button');
      const menu = d.querySelector('.q-menu');
      if (!btn || !menu) return;

      btn.setAttribute('aria-haspopup', 'true');
      btn.setAttribute('aria-expanded', 'false');

      menu.classList.remove('absolute','left-0','mt-2','shadow-xl');
      d.classList.remove('group');

      menu.style.display = 'none';
      menu.classList.add('mt-1','border','border-white/10','rounded-xl','bg-black/20','p-1','relative','static');

      const toggleMenu = (e) => {
        if (e) e.preventDefault();
        const open = menu.style.display !== 'none';
        menu.style.display = open ? 'none' : 'block';
        btn.setAttribute('aria-expanded', String(!open));
        d.classList.toggle('open', !open);
      };

      btn.addEventListener('click', toggleMenu);
      btn.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') toggleMenu(e);
      });
    });

    cloned.className = 'flex flex-col gap-2';
    cloned.querySelectorAll('a,button').forEach(el => el.classList.add('text-white/90','hover:text-white','px-3','py-2','rounded-lg'));
    slot.appendChild(cloned);
  }

  // ===================== Drawer toggle =====================
  function setOpen(open) {
    if (!toggle || !drawer) return;
    toggle.setAttribute('aria-expanded', String(open));
    drawer.classList.toggle('pointer-events-none', !open);
    drawer.classList.toggle('opacity-0', !open);
    drawer.classList.toggle('translate-y-2', !open);
  }
  toggle?.addEventListener('click', (e) => {
    e.stopPropagation();
    setOpen(toggle.getAttribute('aria-expanded') !== 'true');
  });
  document.addEventListener('click', (e) => {
    if (!drawer || !toggle) return;
    if (!drawer.contains(e.target) && !toggle.contains(e.target)) setOpen(false);
  });
  document.addEventListener('keydown', (e) => { if (e.key === 'Escape') setOpen(false); });

  // ===================== Active link highlight =====================
  try {
    const path = (location.pathname.replace(/\/+$/,'/') || '/').toLowerCase();
    document.querySelectorAll('#q-links a').forEach(a => {
      const href = (a.getAttribute('href') || '').replace(/\/+$/,'/').toLowerCase();
      if (href && href !== '#' && path === href) a.classList.add('text-[#df8327]');
    });
  } catch(_) {}

  // ===================== FORCE call/support hover animation (wrapper-based) =====================
  // Why this works:
  // Some styles (e.g., @media (prefers-reduced-motion: reduce)) set `.q-action:hover { transform:none !important; }`.
  // Instead of fighting that, we animate an INNER wrapper so the anchor's hover rule doesn't cancel our transform.
  (function forceActionHoverAnimation(){
    const actions = document.querySelectorAll('#q-site-nav .q-action, #q-drawer .q-action');
    actions.forEach((el) => {
      // 1) Ensure a dedicated inner wrapper we can transform independently
      let inner = el.querySelector('.q-action__inner');
      if (!inner) {
        inner = document.createElement('span');
        inner.className = 'q-action__inner';
        inner.style.display = 'inline-flex';
        inner.style.alignItems = 'center';
        inner.style.gap = '0.5rem';

        // Move all existing children into the inner wrapper
        while (el.firstChild) inner.appendChild(el.firstChild);
        el.appendChild(inner);
      }

      // 2) Baseline gradient on the ANCHOR (for the border sweep)
      el.style.border = '1px solid transparent';
      el.style.backgroundImage =
        'linear-gradient(#1a1a1a,#1a1a1a),linear-gradient(90deg,var(--text-primary),var(--text-primary-light),var(--text-primary))';
      el.style.backgroundOrigin = 'padding-box,border-box';
      el.style.backgroundClip   = 'padding-box,border-box';
      el.style.backgroundSize   = '100% 100%, 200% 100%';
      el.style.backgroundPosition = '0 0, 0% 0%';
      el.style.willChange = 'transform, filter, background-position';

      // 3) Transitions (both layers)
      const elExisting = getComputedStyle(el).transition || '';
      const elAdd = 'background-position .6s linear, filter .18s ease';
      el.style.transition = elExisting ? (elExisting + ',' + elAdd) : elAdd;

      inner.style.transition = 'transform .18s ease';
      inner.style.willChange = 'transform';

      // 4) Event handlers â€” animate INNER for grow, anchor for gradient sweep
      const onEnter = () => {
        // gradient sweep on border
        el.style.backgroundPosition = '0 0, 100% 0%';
        // grow on inner (bypasses .q-action:hover transform rules)
        inner.style.setProperty('transform', 'scale(1.06)', 'important');
      };
      const onLeave = () => {
        el.style.backgroundPosition = '0 0, 0% 0%';
        inner.style.setProperty('transform', 'none', 'important');
      };

      el.addEventListener('mouseenter', onEnter, { passive: true });
      el.addEventListener('mouseleave', onLeave, { passive: true });
      el.addEventListener('focus', onEnter, { passive: true });
      el.addEventListener('blur', onLeave, { passive: true });

      // Touch hint: simulate hover on first tap, follow link on second
      let tapped = false;
      el.addEventListener('touchend', (e) => {
        if (!tapped) { onEnter(); tapped = true; setTimeout(() => tapped = false, 600); e.preventDefault(); }
      }, { passive: false });
    });
  })();

  

  // ===================== Preload logo (best-effort) =====================
  try {
    if (!document.querySelector('link[rel="preload"][as="image"][href*="logo-nav"]')) {
      const link = document.createElement('link');
      link.rel = 'preload';
      link.as = 'image';
      const avif = document.querySelector('source[type="image/avif"][srcset*="logo-nav"]');
      const webp = document.querySelector('source[type="image/webp"][srcset*="logo-nav"]');
      link.href = (avif && avif.getAttribute('srcset')) ||
                  (webp && webp.getAttribute('srcset')) ||
                  (document.querySelector('#q-site-nav img[src*="logo-nav"]')?.getAttribute('src')) || '';
      if (link.href) document.head.appendChild(link);
    }
  } catch(_) {}

})();
</script>


<style>
  /* underline only under the label text */
  #q-site-nav .q-pill.q-pill--hover { position: relative; }
  #q-site-nav .q-pill.q-pill--hover .q-label {
    position: relative;
    display: inline-block; /* shrink to text width */
  }
  #q-site-nav .q-pill.q-pill--hover .q-label::after {
    content: "";
    position: absolute;
    left: 0;
    right: 0;           /* matches the text width */
    bottom: -2px;       /* nudge as needed */
    height: 2px;
    background: currentColor;
    transform: scaleX(0);
    transform-origin: left;
    transition: transform .22s ease;
  }
  #q-site-nav .q-pill.q-pill--hover:hover .q-label::after,
  #q-site-nav .q-pill.q-pill--hover:focus-visible .q-label::after {
    transform: scaleX(1);
  }

    @media (max-width: 1023.5px) {
    .q-pill{
      color: white !important;
    }
  }
</style>
