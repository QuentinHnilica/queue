<div data-theme="queueAdminPanel">
  <div class="flex items-center justify-center py-20 px-6 min-h-screen bg-gradient-to-r from-base-100 to-primary/20">
    <div class="meta-editor">
      <h2>Meta Information Editor</h2>

      <form id="metaForm">
        <!-- Select Page -->
        <label for="page">Select Page:</label>
        <select id="page" name="page">
          <!-- Populated at runtime, excludes items containing "Admin" -->
          {{#each pages}}
            {{!-- We’ll filter again in JS for safety --}}
            <option value="{{this}}">{{this}}</option>
          {{/each}}
        </select>

        <!-- Title -->
        <label for="title">Page Title:</label>
        <input type="text" id="title" name="title" placeholder="Enter new title" />

        <!-- Description -->
        <label for="description">Meta Description:</label>
        <textarea id="description" name="description" rows="3" placeholder="~155 characters recommended"></textarea>

        <!-- Keywords -->
        <label for="keywords">Keywords:</label>
        <input type="text" id="keywords" name="keywords" placeholder="Enter keywords (comma-separated)" />

        <button type="button" id="saveMeta" class="btn btn-primary hover:bg-accent hover:text-base-100 transition-color duration-0 ease-in-out hover:border-neutral">
          Save Changes
        </button>
      </form>

      <p id="status" class="status hidden"></p>
    </div>
  </div>
</div>

<script>
  // In-memory cache
  let metaData = [];
  const selPage = document.getElementById('page');
  const elTitle = document.getElementById('title');
  const elDescription = document.getElementById('description');
  const elKeywords = document.getElementById('keywords');
  const statusEl = document.getElementById('status');

  // Utility: show transient status
  function showStatus(msg, ok = true) {
    statusEl.textContent = msg;
    statusEl.classList.remove('hidden');
    statusEl.classList.toggle('ok', ok);
    statusEl.classList.toggle('err', !ok);
    setTimeout(() => statusEl.classList.add('hidden'), 2500);
  }

  // Populate form fields from cache for current selection
  function displayCurrentPage() {
    const curr = selPage.value;
    // Find record by pageName (case-sensitive per model)
    const rec = metaData.find(r => r.pageName === curr);
    if (rec) {
      elTitle.value = rec.title || '';
      elDescription.value = rec.description || '';
      // Handle either 'keywords' or legacy 'Keywords'
      elKeywords.value = (rec.keywords ?? rec.Keywords ?? '') || '';
    } else {
      elTitle.value = '';
      elDescription.value = '';
      elKeywords.value = '';
    }
  }

  // Fetch all meta rows + sanitize keys
  async function getAllData() {
    try {
      const resp = await fetch('/admin/allMetaDataGet', { method: 'GET', headers: { 'Content-Type': 'application/json' } });
      const data = await resp.json();

      // Filter page list in the dropdown: remove items with "Admin" in name
      [...selPage.options].forEach(opt => {
        if (opt.value.toLowerCase().includes('admin')) opt.remove();
      });

      // Normalize records (ensure lowercase keywords key exists)
      metaData = (Array.isArray(data) ? data : []).map(r => ({
        ...r,
        keywords: (r.keywords ?? r.Keywords ?? ''), // prefer lowercase
      }));

      displayCurrentPage();
    } catch (e) {
      console.error('Error fetching meta data:', e);
      showStatus('Failed to load meta data', false);
    }
  }

  // Save handler: decides between update vs add
  async function saveMeta() {
    const page = selPage.value;
    const title = elTitle.value.trim();
    const description = elDescription.value.trim();
    const keywords = elKeywords.value.trim();

    if (!page) return showStatus('Please select a page', false);
    if (!title) return showStatus('Title is required', false);
    if (!description) return showStatus('Description is required', false);
    if (!keywords) return showStatus('Keywords are required', false);

    const exists = metaData.some(r => r.pageName === page);

    try {
      let endpoint, method, payload;
      if (exists) {
        // Update existing
        endpoint = '/admin/update-meta';
        method = 'PUT';
        payload = { page, title, description, keywords };
      } else {
        // Create new
        endpoint = '/admin/addNewMeta';
        method = 'POST';
        payload = { page, title, description, keywords };
      }

      const resp = await fetch(endpoint, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      const data = await resp.json();

      if (!resp.ok) {
        console.error('Save error:', data);
        return showStatus('Failed to save meta info', false);
      }

      // Update cache and UI
      const newRec = { pageName: page, title, description, keywords };
      const idx = metaData.findIndex(r => r.pageName === page);
      if (idx >= 0) metaData[idx] = newRec; else metaData.push(newRec);

      showStatus('Meta information saved ✓', true);
    } catch (e) {
      console.error('Network error:', e);
      showStatus('Network error while saving', false);
    }
  }

  document.getElementById('saveMeta').addEventListener('click', saveMeta);
  selPage.addEventListener('change', displayCurrentPage);

  // Init
  getAllData();
</script>

<style>
  /* Card */
  .meta-editor {
    background: #fff;
    color: #df8327;
    padding: 1.75rem;
    border-radius: 12px;
    width: 680px;
    max-width: 100%;
    box-shadow:
      0 1px 2px rgba(0,0,0,0.06),
      0 8px 24px rgba(0,0,0,0.08);
  }
  .meta-editor h2 {
    margin-top: 0;
    font-size: 1.35rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  /* Form */
  label {
    display: block;
    margin: 0.5rem 0 0.35rem;
    font-weight: 600;
  }
  select, input[type="text"], textarea {
    width: 100%;
    padding: 0.65rem 0.75rem;
    margin-bottom: 1rem;
    border: 1px solid #eaae73;
    border-radius: 8px;
    background: #f9fafb;
    color: #111827;
    outline: none;
    transition: box-shadow .15s, border-color .15s, background-color .15s;
  }
  select:focus, input[type="text"]:focus, textarea:focus {
    border-color: #eaae73;
    box-shadow: 0 0 0 3px rgba(233, 133, 2, 0.25);
    background: #fff;
  }


  /* Status message */
  .status {
    margin-top: .75rem;
    font-size: .95rem;
  }
  .status.ok { color: #065f46; }   /* teal-800 */
  .status.err { color: #b91c1c; }  /* red-700 */
  .hidden { display: none; }
</style>
